/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include "keys_pl_programmers.h"

#define MO_TOG(layer) &mo_tog layer layer

/ {
    behaviors {
        bspc_del: backspace_delete {
            compatible = "zmk,behavior-mod-morph";
            label = "BACKSPACE_DELETE";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        td_shift: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "shift-caps word";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <&sk LSHFT>, <&caps_word>;
        };

        mo_tog: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "mo_tog";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&tog>;
        };

        td_layer_2: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "swith to symbol layer on double tap";
            #binding-cells = <0>;
            tapping-term-ms = <400>;
            bindings = <MO_TOG(3)>, <&sl 2>;
        };
    };
    
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
  &gresc   &kp PL_Q  &kp PL_W  &kp PL_E  &kp PL_R  &kp PL_T    &kp PL_Y  &kp PL_U  &kp PL_I  &kp PL_O  &kp PL_P  &bspc_del
  &kp TAB  &kp PL_A  &kp PL_S  &kp PL_D  &kp PL_F  &kp PL_G    &kp PL_H  &kp PL_J  &kp PL_K  &kp PL_L  &kp SEMI    &kp SQT
&td_shift  &kp PL_Z  &kp PL_X  &kp PL_C  &kp PL_V  &kp PL_B    &kp PL_N  &kp PL_M  &kp COMMA  &kp DOT  &kp FSLH   &sk RALT
                         &kp LCTRL  &td_layer_2  &kp LEFT_GUI    &kp SPACE  MO_TOG(1)   &kp RET
            >;
        };

        numad {
            bindings = <
&to 0   &trans  &trans  &trans  &trans     &trans    &kp PLUS   &kp N7  &kp N8  &kp N9   &kp ASTERISK  &trans
&trans  &trans  &trans  &kp DOT &kp COMMA  &trans    &kp MINUS  &kp N4  &kp N5  &kp N6   &kp SLASH     &trans
&trans  &trans  &trans  &trans  &trans     &trans    &kp EQUAL  &kp N1  &kp N2  &kp N3   &kp N0     &kp GRAVE
                        &trans  &trans     &trans    &trans  &trans  &trans
            >;
        };

        symbols {
            bindings = <
&to 0   &kp EXCL  &kp AT    &kp HASH  &kp DOLLAR  &kp PERCENT        &kp CARET  &kp AMPS   &kp ASTERISK  &kp LPAR        &kp RPAR     &trans
&trans  &none     &kp LBRC  &kp RBRC  &kp LBKT       &kp RBKT        &kp LPAR   &kp RPAR   &kp SLASH     &kp BACKSLASH   &kp SLASH  &kp PIPE
&trans  &trans    &trans    &trans    &trans           &trans        &trans     &trans     &trans        &trans          &trans       &trans
                        &trans  &trans     &trans    &trans  &trans  &trans
            >;
        };

        fn_navigation_layer {
            bindings = <
&to 0   &kp F1        &kp F2        &kp F3      &kp F4   &none       &none     &none    &kp UP        &none   &none   &trans
&trans  &kp F5        &kp F6        &kp F7      &kp F8   &none       &none  &kp LEFT    &kp DOWN  &kp RIGHT   &trans  &trans
&trans  &kp F9        &kp F10       &kp 11      &kp F12  &none       &none     &none    &none         &none   &trans  &trans
                                    &trans      &trans   &trans      &trans    &trans    &trans
            >;
        };

    };
};
